length(unique(summary(data)$Var1))
length(unique(summary(data)[1]))
length(unique(summary(data)[[1]))
length(unique(summary(data)[[1]]))
summary(data)[,1]
View(summary(data)[,1])
summary(data)[,1]$row.names
class(summary(data))
df <- data.frame(summary(data))
View(df)
df[1]
length(unique(df[1]))
length(df[1])
df[1]
View(df[1])
df$Var1
length(df$Var1)
unique(df$Var1)
length(unique(df$Var1))
data$Riven
data$Aatrox$$id
data$Aatrox$id
sapply(df[1], function(x, data = data){
ss <- data$x
})
sapply(df[1], function(x, data = data){
ss <- data$x$id
})
data$Aatrox$name
df[1]
df[1][1]
getwd
getwd()
install.packages('swirl')
library(swirl)
swirl()
plot(child ~ parent, galton)
plot(jitter(child, 4) ~ parent, galton)
regrline <- lm(child~parent, galton)
abline(regrline, lwd = 3 , col = 'red')
summary(regrline)
fit <- lm(child~parent, galton)
summary(fit)
mean(fit$residuals)
cov(fit$residuals, galton$parent)
install.packages('UsingR')
data(galton)
library(UsingR)
data(galton)
par(mfrow = c(1, 2))
hist(galton$child, col = 'blue', breaks = 100)
hist(galton$parent, col = 'blue', break = 100)
hist(galton$parent, col = 'blue', breaks = 100)
library(manipulate)
myHist <- function(mu){
hist(galton$child, col = 'blue', breaks = 100)
lines(c(mu, mu), c(0, 150), col = 'red', lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", rounc(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child, col = 'blue', breaks = 100)
lines(c(mu, mu), c(0, 150), col = 'red', lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
par(mfrow = c(1, 1))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
data(mtcars)
wt <- mtcars$wt
mpg <- mtcars$mpg
fit <- lm(mpg~wt)
sumCoef <- summary(fit)$coefficients
sumCoef
yhat <- sumCoef[1,1] + sumCoef[2,1]*mean(wt)
sumCoef$residual
fit$residual
e <- fit$residual
s <- sqrt(sum(e^2)/(n-2))
s <- sqrt(sum(e^2)/(n-2))
n <- length(wt)
s <- sqrt(sum(e^2)/(n-2))
yhat - qt(.975, df = fit$df)*s*sqrt(1/n)
e
sum(e)
sum((mpg-(b0-b1*wt))^2) / sum((mpg - b0)^2)
sum((mpg-(sumCoeff[1,1]-sumCoeff[2,1]*wt))^2) / sum((mpg - sumCoeff[2,1])^2)
sum((mpg-(sumCoef[1,1]-sumCoef[2,1]*wt))^2) / sum((mpg - sumCoef[2,1])^2)
sum((mpg-(sumCoef[1,1]-sumCoef[2,1]*wt))^2) / sum((mpg - sumCoef[1,1])^2)
sumCoef[1,1]
y - sumCoef[1,1]
mpg - sumCoef[1,1]
e2 <- mpg - sumCoef[1,1]
e2^2
e
e^2
sum(e^2)/sum(e2^2)
sumCoef[1,1]
mpg
mpg-sumCoef[1,1]
wt
mpg-(sumCoeff[1,1]-sumCoeff[2,1]*wt
mpg-sumCoeff[1,1]-sumCoeff[2,1]*wt
mpg-sumCoef[1,1]-sumCoef[2,1]*wt
sum((mpg-sumCoef[1,1]-sumCoef[2,1]*wt)^2)
sum((mpg-sumCoef[1,1])^2)
sum((mpg-sumCoef[1,1]-sumCoef[2,1]*wt)^2)/(sum((mpg-sumCoef[1,1])^2))
sumCoef[1,1]-sumCoef[2,1]*wt
mpg
plot(mpg, wt)
plot(wt, mpg)
sumCoef[2,1]
wt
sumCoef[1,1]+sumCoef[2,1]*wt
mpg
mpg-(sumCoef[1,1]+sumCoef[2,1]*wt)
mpg - sumCoef[1,1]
e <- mpg-(sumCoef[1,1]+sumCoef[2,1]*wt)
e2 <- mpg - sumCoef[1,1]
e^2
e2^2
sum(e^2)
sum(e2^2)
mpg - mean(mpg)
(mpg - mean(mpg))^2
sum((mpg - mean(mpg))^2)
sum(e^2)/sum((mpg - mean(mpg))^2)
lm(mpg~ offset(wt))
library(datasets); data(swiss); require(stats); require(graphics)
pair(swiss, panel = panel.smooth, main = "Swiss Data", col = 3 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss Data", col = 3 + (swiss$Catholic > 50))
fit <- lm(Fertility ~., data = swiss)
summary(fit)
agr <- lm(Fertility ~ Agriculture, data = swiss)
sumcoefag <- summary(agr)$coefficients
sumcoefag
data(mtcars)
n <- 100: t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2))
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2))
head(x)
class(x)
x
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x*beta1 + t * tau + rnorm(n, sd = sigma)
y
plot(x, y, type = "n", frame = F)
abline(lm(y~x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n, y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2])
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
data(swiss); par(mfrow = c(2, 2))
fit <- lm(Fertility ~., data = swiss); plot(fit)
data(mtcars)
head(mtcars)
fit <- lm(mpg ~ cyl + wt, data = mtcars)
fit
4*1.508
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] - 4*1.508
fit <- lm(mpg ~ factor(cyl) + wt, data = mtcars)
summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoef[1,1] - sumCoef[3,1]
sumCoef[1,1] + sumCoef[3,1]
for (n in 1:6) test[n] <- n^2 + n^3
test <- 1:6
for (n in 1:6) test[n] <- n^2 + n^3
wtFit <- lm(mpg ~ cyl + wt, mtcars)
fit <- lm(mpg ~ cyl, mtcars)
sumCoefwt <- summary(wtFit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoefwt
sumCoef
wtFit <- lm(mpg ~ factor(cyl) + wt, mtcars)
fit <- lm(mpg ~ factor(cyl), mtcars)
sumCoefwt <- summary(wtFit)$coefficients
sumCoef <- summary(fit)$coefficients
sumCoefwt;sumCoef
fit1 <- lm(mpg ~ factor(cyl) + wt + wt*cyl, mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + wt*cyl, mtcars)
fit1 <- lm(mpg ~ factor(cyl) + wt, mtcars)
anove(fit1, fit2)
anova(fit1, fit2)
summary(fit)
lm(mpg ~ factor(cyl) - 1, mtcars)
summary(lm(mpg ~ factor(cyl) - 1, mtcars))
View(mtcars)
?mtcars
swirl()
library(swirl)
swirl()
bye()
swirl()
fit <- lm(child ~ parent, galton)
swirl()
plot(child~ parent, galton)
plot(jitter(child,4) ~ parent, galton)
regline <- lm(child ~ parent, galton)
regrline <- lm(child ~ parent, galton)
abline(regrline, lwd=3, col='red')
summary(regrline)
bye()
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(gch_nor~gpa_nor)
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent - 1)
lm(child ~ ones + parent - 1, galton)
lm(child~parent, galton)
lm(child ~ 1, galton)
head(trees)
fit ,- lm(Volume ~ Girth + Height + Constant - 1, trees)
fit <- lm(Volume ~ Girth + Height + Constant - 1, trees)
install.packages(c("class", "cluster", "codetools", "KernSmooth", "MASS", "mgcv"))
install.packages('caret')
install.packages('e1071')
library(caret)
library(ElemStatLearn)
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.train)
data.train$y <- as.factor(data.train$y); data.test$y <- as.factor(data.test$y)
vowel.train$y <- as.factor(vowel.train$y); vowel.test$y <- as.factor(vowel.test$y)
train.rf <- train(y~., method = 'rf', data = vowel.train); train.gbm <- train(y~., method = 'gbm', data = vowel.train)
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
accuracy(vowel.test$y, predict(train.rf, vowel.test))
?accuracy
??accuracy
install.packages('forcast')
set.seed(33833)
train.rf <- train(y~., method = 'rf', data = vowel.train); train.gbm <- train(y~., method = 'gbm', data = vowel.train)
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))$accuracy; confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))$accuracy
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))$Accuracy; confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))$Accuracy
confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))$Accuracy
names(confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test)))
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))$overall; confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))$overall
confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))$Accuracy
confusionMatrix(vowel.test$y, predict(train.gbm, vowel.test))
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
set.seed(33833)
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
confusionMatrix(vowel.test$y, predict(train.rf, vowel.test))
se.seed(3433)
set.seed(3433)
library(AppliedPredictiveModeling)
install.packages('AppliedPredictiveModeling')
library(caret)
library(gbm)
library(rf)
library(randomForest)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62433)
train.rf <- train(predictors~., method = 'rf', data = training); train.gbm <- train(predictors~., method = 'gbm', data = training); train.lda <- train(predictors~., method = 'lda', data = training)
train.rf <- train(diagnosis~., method = 'rf', data = training); train.gbm <- train(diagnosis~., method = 'gbm', data = training); train.lda <- train(diagnosis~., method = 'lda', data = training)
stacked <- cbind(train.gbm, train.lda, train.rf)
confusionMatrix(testing$diagnosis, predict(train.rf, testing))
confusionMatrix(testing$diagnosis, predict(train.gbm, testing))
confusionMatrix(testing$diagnosis, predict(train.lda, testing))
pred.rf <- predict(train.rf, testing); pred.gbm <- predict(train.gbm, testing); pred.lda <- predict(train.lda, testing)
predDF <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
comMod <- train(diagnosis~., method = 'rf', data = predDF)
confusionMatrix(testing$diagnosis, predict(comMod, testing))
?plot.enet
??plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
modfit <- train(CompressiveStrength~., method = 'lasso', data = training)
require('elasticnet')
plot.enet(modfit)
modfit
plot(modfit$finalModel, xvar = )
plot(modfit$finalModel, xvar = 'penalty')
install.packages('forcast')
install.packages("forcast")
library(lubridate) # For year() function below
dat = read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'))
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages('lubridate')
library(lubridate) # For year() function below
dat = read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'))
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
fit <- bats(tstrain)
length<-dim(testing)[1]
fcast <- forecast(fit,h=length,level=c(95))
install.packages('forecast')
library(lubridate) # For year() function below
dat = read.csv(url('https://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv'))
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
fit <- bats(tstrain)
length<-dim(testing)[1]
fcast <- forecast(fit,h=length,level=c(95))
pred <- fcast$upper
length(pred)
length(testing$visitsTumblr)
testing$visitsTumblr
match(testing$visitsTumblr, pred)
pred
pred-testing$visitsTumblr
pred-testing$visitsTumblr>0
length(pred-testing$visitsTumblr>0)
which(pred-testing$visitsTumblr>0)
length(which(pred-testing$visitsTumblr>0))/length(pred)
testing$visitsTumblr
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(325)
library(e1071)
fit <- svm(CompressiveStrength~., data = training)
confusionMatrix(testing$CompressiveStrength, predict(fit, testing))
confusionMatrix(testing$CompressiveStrength, predict.svm(fit, testing))
predict.svm(fit, testing)
predict(fit, testing)
pred <- predict(fit, testing)
actual <- testing$CompressiveStrength
install.packages("hydroGOF")
library(hydroGOF)
rmse(pred, actual)
str(pred)
View(pred)
View(actual)
confusionMatrix(testing$CompressiveStrength, predict.svm(fit, testing)[1])
confusionMatrix(testing$CompressiveStrength, predict(fit, testing)[1])
View(predict(fit, testing)[1])
View(predict(fit, testing)[,1])
View(predict(fit, testing)$x)
match(actual, pred)
str(actual)
class(actual)
class(pred)
pred2 <- pred
row.names(pred2) <- NULL
confusionMatrix(actual, pred2)
str(as.factor(actual))
str(as.factor(pred))
?confusionMatrix
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf <- train(diagnosis~., method = 'rf')
rf <- train(diagnosis~., method = 'rf', data = training); gbm <- train(diagnosis~., method = 'gbm', data =training); lda <- train(diagnosis~., method = 'lda', data = training)
pred.rf <- predict(rf, training); pred.gbm <- predict(gbm, training); pred.lda <- predict(lda, training)
actual <- training$diagnosis
confusionMatrix(actual, pred.rf)
confusionMatrix(actual, pred.gbm)
actual <- testing$diagnosis
confusionMatrix(actual, predict(rf, testing))
confusionMatrix(actual, predict(gbm, testing))
confusionMatrix(actual, predict(lda, testing))
stacked <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = training$diagnosis)
stacked.fit <- train(diagnosis~., method = 'rf', data = stacked)
confusionMatrix(actual, predict(stacked.fit, testing))
confusionMatrix(testing$diagnosis, predict(stacked.fit, testing))
predict(stacked.fit, testing)
pred.rf <- predict(rf, testing); pred.gbm <- predict(gbm, testing); lda <- predict(lda, testing)
stacked <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
pred.lda <- predict(lda, training)
lda <- train(diagnosis~., method = 'lda', data = training)
pred.rf <- predict(rf, testing); pred.gbm <- predict(gbm, testing); pred.lda <- predict(lda, testing)
stacked <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
stacked.fit <- train(diagnosis~., method = 'rf', data = stacked)
confusionMatrix(testing$diagnosis, predict(stacked.fit, testing))
install.packages(c("caret", "gbm", "randomForest", "AppliedPredictiveModeling", "lda", "e1071"))
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf <- train(diagnosis~., method = 'rf', data = training); gbm <- train(diagnosis~., method = 'gbm', data =training); lda <- train(diagnosis~., method = 'lda', data = training)
pred.rf <- predict(rf, testing); pred.gbm <- predict(gbm, testing); pred.lda <- predict(lda, testing)
stacked <- data.frame(pred.rf, pred.gbm, pred.lda, diagnosis = testing$diagnosis)
stacked.fit <- train(diagnosis~., method = 'rf', data = stacked)
confusionMatrix(testing$diagnosis, predict(stacked.fit, testing))
session
sessionInfo()
foo
runif(1)
set.seed(1)
runif(1)
options(digits=22)
runif(1)
runif(1)
set.seed(1)
runif(1)
runif(1)
options(digits=40)
regexp(1,5)
rexp(1,5)
set.seed(9); options(digits=22);rexp(1,5)
?rexp
require(rCahrts)
require(rCharts)
require('rCharts')
install.packages('rCharts')
library(rCharts)
??rCharts
install.packages('base64enc')
install.packages('rCharts')
install.packages('RCurl')
install.packages('devtools')
library(devtools)
find_rtools()
library(devtools)
install_github("rcharts","ramnathv")
library(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, sex == 'Male')
)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save('fig/n1.html', cdn = T)
n1
n1$save('n1.html', cdn = T)
cat('<iframe src = 'n1.html' width= 100%, height = 600></iframe>')
cat('<iframe src = "n1.html" width= 100%, height = 600></iframe>')
n1
n1$save('n1.html', cdn = TRUE)
cat('<iframe src = "n1.html" width= 100%, height = 600></iframe>')
n1
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
View(haireye)
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
install.packages('rCharts')
install.packages("rCharts")
install.packages("rCharts")
install.packages('rCharts')
require(c(devtools, base64enc))
require(devtools)
require(base63enc)
require(base64enc)
install.packages('rcharts')
install.packages('rCharts')
install_github('rCharts', 'ramnathv')
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
install.packages('downloader')
library(downloader)
download("https://github.com/ramnathv/rCharts/archive/master.tar.gz", "rCharts.tar.gz")
install.packages("rCharts.tar.gz", repos = NULL, type = "source")
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 <- nPlot(Freq ~ Hair, group = 'Eye', type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
n1$save('n1.html', cdn = T)
cat('<iframe src="n1.html" width = 100%, height = 600></iframe>')
setwd("D:/Documents/GitHub/DataProductsProject/Project/Project")
setwd("D:/Documents/GitHub/DataProductsProject/Project/Project")
shiny::runApp()
setwd("D:/Documents/GitHub/DataProductsProject/Project/DataProductsProject")
shiny::runApp()
